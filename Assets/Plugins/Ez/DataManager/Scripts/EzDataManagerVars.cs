// Copyright (c) 2016 Ez Entertainment SRL. All Rights Reserved.
// This code can only be used under the standard Unity Asset Store End User License Agreement
// A Copy of the EULA APPENDIX 1 is available at http://unity3d.com/company/legal/as_terms

// This partial class is Auto-Generated by the EzDataUtility

using UnityEngine;
using System.Collections.Generic;

namespace Ez.DataManager
{
    public partial class EzDataManager
    {
#pragma warning disable 0649

        #region Settings
        public string CTGSTRT_0 = "Settings";
        public bool soundOn;
        public float soundVolume;
        public bool musicOn;
        public float musicVolume;
        public readonly int CTGEND_0 = 4;
        #endregion

        #region Getter/Setter Functions

        public static bool GetFloatByName(string varName, out float value)
        {
            value = 0f;
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                case "soundVolume":
                    value = EzDataManager.Instance.soundVolume;
                    return true;
                case "musicVolume":
                    value = EzDataManager.Instance.musicVolume;
                    return true;
                default:
                    return false;
            }
        }

        public static bool SetFloatByName(string varName, float value)
        {
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                case "soundVolume":
                    EzDataManager.Instance.soundVolume =  value ;
                    return true;
                case "musicVolume":
                    EzDataManager.Instance.musicVolume =  value ;
                    return true;
                default:
                    return false;
            }
        }

        public static bool GetIntByName(string varName, out int value)
        {
            value = 0;
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool SetIntByName(string varName, int value)
        {
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool GetBoolByName(string varName, out bool value)
        {
            value = false;
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                case "soundOn":
                    value = EzDataManager.Instance.soundOn;
                    return true;
                case "musicOn":
                    value = EzDataManager.Instance.musicOn;
                    return true;
                default:
                    return false;
            }
        }

        public static bool SetBoolByName(string varName, bool value)
        {
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                case "soundOn":
                    EzDataManager.Instance.soundOn =  value ;
                    return true;
                case "musicOn":
                    EzDataManager.Instance.musicOn =  value ;
                    return true;
                default:
                    return false;
            }
        }

        public static bool GetGameObjectByName(string varName, out GameObject value)
        {
            value = null;
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool SetGameObjectByName(string varName, GameObject value)
        {
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool GetStringByName(string varName, out string value)
        {
            value = string.Empty;
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool SetStringByName(string varName, string value)
        {
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool GetVector2ByName(string varName, out Vector2 value)
        {
            value = Vector2.zero;
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool SetVector2ByName(string varName, Vector2 value)
        {
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool GetVector3ByName(string varName, out Vector3 value)
        {
            value = Vector3.zero;
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool SetVector3ByName(string varName, Vector3 value)
        {
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool GetColorByName(string varName, out Color value)
        {
            value = Color.black;
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool SetColorByName(string varName, Color value)
        {
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool GetRectByName(string varName, out Rect value)
        {
            value = new Rect();
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool SetRectByName(string varName, Rect value)
        {
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool GetMaterialByName(string varName, out Material value)
        {
            value = null;
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool SetMaterialByName(string varName, Material value)
        {
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool GetTextureByName(string varName, out Texture value)
        {
            value = null;
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool SetTextureByName(string varName, Texture value)
        {
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool GetQuaternionByName(string varName, out Quaternion value)
        {
            value = Quaternion.identity;
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool SetQuaternionByName(string varName, Quaternion value)
        {
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool GetObjectByName(string varName, out Object value)
        {
            value = null;
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool SetObjectByName(string varName, Object value)
        {
            if(string.IsNullOrEmpty(varName)) return false;
            switch(varName)
            {
                default:
                    return false;
            }
        }

        public static bool GetArrayByName(string arrayName, out System.Array array)
        {
            array = null;
            if(string.IsNullOrEmpty(arrayName)) return false;
            switch(arrayName)
            {
                default:
                    return false;
            }
        }

        public static bool SetArrayByName(string arrayName, System.Array array)
        {
            if(string.IsNullOrEmpty(arrayName)) return false;
            try
            {
                switch(arrayName)
                {
                    default:
                        return false;
                }
            }
            catch(System.Exception)
            {
                return false;
            } 
        }
        #endregion //Getter/Setter Functions

#pragma warning restore 0649
    }
}